"use strict";(self.webpackChunkproyekmodul3mk4=self.webpackChunkproyekmodul3mk4||[]).push([[349],{8706:(e,t,n)=>{n.d(t,{fi:()=>b,kZ:()=>y});var r=n(7517),o=n(190),i=n(825),a=n(4958),s=n(216),f=n(7078),c=n(8653),p=n(2392);function d(e,t,n){void 0===n&&(n=!1);var d,u,l=(0,a.Re)(t),m=(0,a.Re)(t)&&function(e){var t=e.getBoundingClientRect(),n=t.width/e.offsetWidth||1,r=t.height/e.offsetHeight||1;return 1!==n||1!==r}(t),v=(0,c.Z)(t),h=(0,r.Z)(e,m),Z={scrollLeft:0,scrollTop:0},g={x:0,y:0};return(l||!l&&!n)&&(("body"!==(0,s.Z)(t)||(0,p.Z)(v))&&(Z=(d=t)!==(0,i.Z)(d)&&(0,a.Re)(d)?{scrollLeft:(u=d).scrollLeft,scrollTop:u.scrollTop}:(0,o.Z)(d)),(0,a.Re)(t)?((g=(0,r.Z)(t,!0)).x+=t.clientLeft,g.y+=t.clientTop):v&&(g.x=(0,f.Z)(v))),{x:h.left+Z.scrollLeft-g.x,y:h.top+Z.scrollTop-g.y,width:h.width,height:h.height}}var u=n(2964),l=n(7771),m=n(4815),v=n(5097);function h(e){var t=new Map,n=new Set,r=[];function o(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&o(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||o(e)})),r}var Z={placement:"bottom",modifiers:[],strategy:"absolute"};function g(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function y(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,r=void 0===n?[]:n,o=t.defaultOptions,i=void 0===o?Z:o;return function(e,t,n){void 0===n&&(n=i);var o,s,f={placement:"bottom",orderedModifiers:[],options:Object.assign({},Z,i),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],p=!1,y={state:f,setOptions:function(n){var o="function"==typeof n?n(f.options):n;b(),f.options=Object.assign({},i,f.options,o),f.scrollParents={reference:(0,a.kK)(e)?(0,l.Z)(e):e.contextElement?(0,l.Z)(e.contextElement):[],popper:(0,l.Z)(t)};var s,p,d=function(e){var t=h(e);return v.xs.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((s=[].concat(r,f.options.modifiers),p=s.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(p).map((function(e){return p[e]}))));return f.orderedModifiers=d.filter((function(e){return e.enabled})),f.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var i=o({state:f,name:t,instance:y,options:r});c.push(i||function(){})}})),y.update()},forceUpdate:function(){if(!p){var e=f.elements,t=e.reference,n=e.popper;if(g(t,n)){f.rects={reference:d(t,(0,m.Z)(n),"fixed"===f.options.strategy),popper:(0,u.Z)(n)},f.reset=!1,f.placement=f.options.placement,f.orderedModifiers.forEach((function(e){return f.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0;r<f.orderedModifiers.length;r++)if(!0!==f.reset){var o=f.orderedModifiers[r],i=o.fn,a=o.options,s=void 0===a?{}:a,c=o.name;"function"==typeof i&&(f=i({state:f,options:s,name:c,instance:y})||f)}else f.reset=!1,r=-1}}},update:(o=function(){return new Promise((function(e){y.forceUpdate(),e(f)}))},function(){return s||(s=new Promise((function(e){Promise.resolve().then((function(){s=void 0,e(o())}))}))),s}),destroy:function(){b(),p=!0}};if(!g(e,t))return y;function b(){c.forEach((function(e){return e()})),c=[]}return y.setOptions(n).then((function(e){!p&&n.onFirstUpdate&&n.onFirstUpdate(e)})),y}}var b=y()},4586:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(4958);function o(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&(0,r.Zq)(n)){var o=t;do{if(o&&e.isSameNode(o))return!0;o=o.parentNode||o.host}while(o)}return!1}},7517:(e,t,n)=>{function r(e,t){void 0===t&&(t=!1);var n=e.getBoundingClientRect();return{width:n.width/1,height:n.height/1,top:n.top/1,right:n.right/1,bottom:n.bottom/1,left:n.left/1,x:n.left/1,y:n.top/1}}n.d(t,{Z:()=>r})},1967:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(825);function o(e){return(0,r.Z)(e).getComputedStyle(e)}},8653:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(4958);function o(e){return(((0,r.kK)(e)?e.ownerDocument:e.document)||window.document).documentElement}},2964:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7517);function o(e){var t=(0,r.Z)(e),n=e.offsetWidth,o=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-o)<=1&&(o=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:o}}},216:(e,t,n)=>{function r(e){return e?(e.nodeName||"").toLowerCase():null}n.d(t,{Z:()=>r})},4815:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(825),o=n(216),i=n(1967),a=n(4958);function s(e){return["table","td","th"].indexOf((0,o.Z)(e))>=0}var f=n(7505);function c(e){return(0,a.Re)(e)&&"fixed"!==(0,i.Z)(e).position?e.offsetParent:null}function p(e){for(var t=(0,r.Z)(e),n=c(e);n&&s(n)&&"static"===(0,i.Z)(n).position;)n=c(n);return n&&("html"===(0,o.Z)(n)||"body"===(0,o.Z)(n)&&"static"===(0,i.Z)(n).position)?t:n||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&(0,a.Re)(e)&&"fixed"===(0,i.Z)(e).position)return null;for(var n=(0,f.Z)(e);(0,a.Re)(n)&&["html","body"].indexOf((0,o.Z)(n))<0;){var r=(0,i.Z)(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(e)||t}},7505:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(216),o=n(8653),i=n(4958);function a(e){return"html"===(0,r.Z)(e)?e:e.assignedSlot||e.parentNode||((0,i.Zq)(e)?e.host:null)||(0,o.Z)(e)}},825:(e,t,n)=>{function r(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}n.d(t,{Z:()=>r})},190:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(825);function o(e){var t=(0,r.Z)(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}},7078:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(7517),o=n(8653),i=n(190);function a(e){return(0,r.Z)((0,o.Z)(e)).left+(0,i.Z)(e).scrollLeft}},4958:(e,t,n)=>{n.d(t,{kK:()=>o,Re:()=>i,Zq:()=>a});var r=n(825);function o(e){return e instanceof(0,r.Z)(e).Element||e instanceof Element}function i(e){return e instanceof(0,r.Z)(e).HTMLElement||e instanceof HTMLElement}function a(e){return"undefined"!=typeof ShadowRoot&&(e instanceof(0,r.Z)(e).ShadowRoot||e instanceof ShadowRoot)}},2392:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(1967);function o(e){var t=(0,r.Z)(e),n=t.overflow,o=t.overflowX,i=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+i+o)}},7771:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(7505),o=n(2392),i=n(216),a=n(4958);function s(e){return["html","body","#document"].indexOf((0,i.Z)(e))>=0?e.ownerDocument.body:(0,a.Re)(e)&&(0,o.Z)(e)?e:s((0,r.Z)(e))}var f=n(825);function c(e,t){var n;void 0===t&&(t=[]);var i=s(e),a=i===(null==(n=e.ownerDocument)?void 0:n.body),p=(0,f.Z)(i),d=a?[p].concat(p.visualViewport||[],(0,o.Z)(i)?i:[]):i,u=t.concat(d);return a?u:u.concat(c((0,r.Z)(d)))}},5097:(e,t,n)=>{n.d(t,{we:()=>r,I:()=>o,F2:()=>i,t$:()=>a,d7:()=>s,mv:()=>f,BL:()=>c,ut:()=>p,zV:()=>d,Pj:()=>u,k5:()=>l,YP:()=>m,bw:()=>v,Ct:()=>h,N7:()=>Z,ij:()=>g,r5:()=>y,XM:()=>b,DH:()=>w,wX:()=>x,iv:()=>O,cW:()=>k,MS:()=>j,xs:()=>P});var r="top",o="bottom",i="right",a="left",s="auto",f=[r,o,i,a],c="start",p="end",d="clippingParents",u="viewport",l="popper",m="reference",v=f.reduce((function(e,t){return e.concat([t+"-"+c,t+"-"+p])}),[]),h=[].concat(f,[s]).reduce((function(e,t){return e.concat([t,t+"-"+c,t+"-"+p])}),[]),Z="beforeRead",g="read",y="afterRead",b="beforeMain",w="main",x="afterMain",O="beforeWrite",k="write",j="afterWrite",P=[Z,g,y,b,w,x,O,k,j]},5716:(e,t,n)=>{n.r(t),n.d(t,{afterMain:()=>r.wX,afterRead:()=>r.r5,afterWrite:()=>r.MS,applyStyles:()=>o.Z,arrow:()=>i.Z,auto:()=>r.d7,basePlacements:()=>r.mv,beforeMain:()=>r.XM,beforeRead:()=>r.N7,beforeWrite:()=>r.iv,bottom:()=>r.I,clippingParents:()=>r.zV,computeStyles:()=>a.Z,createPopper:()=>v.fi,createPopperBase:()=>l.fi,createPopperLite:()=>Z,detectOverflow:()=>m.Z,end:()=>r.ut,eventListeners:()=>s.Z,flip:()=>f.Z,hide:()=>c.Z,left:()=>r.t$,main:()=>r.DH,modifierPhases:()=>r.xs,offset:()=>p.Z,placements:()=>r.Ct,popper:()=>r.k5,popperGenerator:()=>l.kZ,popperOffsets:()=>d.Z,preventOverflow:()=>u.Z,read:()=>r.ij,reference:()=>r.YP,right:()=>r.F2,start:()=>r.BL,top:()=>r.we,variationPlacements:()=>r.bw,viewport:()=>r.Pj,write:()=>r.cW});var r=n(5097),o=n(7347),i=n(2774),a=n(2363),s=n(6041),f=n(9564),c=n(5443),p=n(7968),d=n(5815),u=n(7464),l=n(8706),m=n(16),v=n(557),h=[s.Z,d.Z,a.Z,o.Z],Z=(0,l.kZ)({defaultModifiers:h})},7347:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(216),o=n(4958);const i={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},i=t.attributes[e]||{},a=t.elements[e];(0,o.Re)(a)&&(0,r.Z)(a)&&(Object.assign(a.style,n),Object.keys(i).forEach((function(e){var t=i[e];!1===t?a.removeAttribute(e):a.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var i=t.elements[e],a=t.attributes[e]||{},s=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});(0,o.Re)(i)&&(0,r.Z)(i)&&(Object.assign(i.style,s),Object.keys(a).forEach((function(e){i.removeAttribute(e)})))}))}},requires:["computeStyles"]}},2774:(e,t,n)=>{n.d(t,{Z:()=>u});var r=n(9013),o=n(2964),i=n(4586),a=n(4815),s=n(2443),f=n(125),c=n(9718),p=n(2090),d=n(5097);const u={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,i=e.name,u=e.options,l=n.elements.arrow,m=n.modifiersData.popperOffsets,v=(0,r.Z)(n.placement),h=(0,s.Z)(v),Z=[d.t$,d.F2].indexOf(v)>=0?"height":"width";if(l&&m){var g=function(e,t){return e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e,(0,c.Z)("number"!=typeof e?e:(0,p.Z)(e,d.mv))}(u.padding,n),y=(0,o.Z)(l),b="y"===h?d.we:d.t$,w="y"===h?d.I:d.F2,x=n.rects.reference[Z]+n.rects.reference[h]-m[h]-n.rects.popper[Z],O=m[h]-n.rects.reference[h],k=(0,a.Z)(l),j=k?"y"===h?k.clientHeight||0:k.clientWidth||0:0,P=x/2-O/2,E=g[b],D=j-y[Z]-g[w],M=j/2-y[Z]/2+P,R=(0,f.Z)(E,M,D),L=h;n.modifiersData[i]=((t={})[L]=R,t.centerOffset=R-M,t)}},effect:function(e){var t=e.state,n=e.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=t.elements.popper.querySelector(r)))&&(0,i.Z)(t.elements.popper,r)&&(t.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}},2363:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(5097),o=n(4815),i=n(825),a=n(8653),s=n(1967),f=n(9013),c=n(9376),p=n(440),d={top:"auto",right:"auto",bottom:"auto",left:"auto"};function u(e){var t,n=e.popper,f=e.popperRect,c=e.placement,u=e.variation,l=e.offsets,m=e.position,v=e.gpuAcceleration,h=e.adaptive,Z=e.roundOffsets,g=!0===Z?function(e){var t=e.x,n=e.y,r=window.devicePixelRatio||1;return{x:(0,p.NM)((0,p.NM)(t*r)/r)||0,y:(0,p.NM)((0,p.NM)(n*r)/r)||0}}(l):"function"==typeof Z?Z(l):l,y=g.x,b=void 0===y?0:y,w=g.y,x=void 0===w?0:w,O=l.hasOwnProperty("x"),k=l.hasOwnProperty("y"),j=r.t$,P=r.we,E=window;if(h){var D=(0,o.Z)(n),M="clientHeight",R="clientWidth";D===(0,i.Z)(n)&&(D=(0,a.Z)(n),"static"!==(0,s.Z)(D).position&&"absolute"===m&&(M="scrollHeight",R="scrollWidth")),D=D,c!==r.we&&(c!==r.t$&&c!==r.F2||u!==r.ut)||(P=r.I,x-=D[M]-f.height,x*=v?1:-1),c!==r.t$&&(c!==r.we&&c!==r.I||u!==r.ut)||(j=r.F2,b-=D[R]-f.width,b*=v?1:-1)}var L,B=Object.assign({position:m},h&&d);return v?Object.assign({},B,((L={})[P]=k?"0":"",L[j]=O?"0":"",L.transform=(E.devicePixelRatio||1)<=1?"translate("+b+"px, "+x+"px)":"translate3d("+b+"px, "+x+"px, 0)",L)):Object.assign({},B,((t={})[P]=k?x+"px":"",t[j]=O?b+"px":"",t.transform="",t))}const l={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,o=void 0===r||r,i=n.adaptive,a=void 0===i||i,s=n.roundOffsets,p=void 0===s||s,d={placement:(0,f.Z)(t.placement),variation:(0,c.Z)(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,u(Object.assign({},d,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:a,roundOffsets:p})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,u(Object.assign({},d,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:p})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}}},6041:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(825),o={passive:!0};const i={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,i=e.options,a=i.scroll,s=void 0===a||a,f=i.resize,c=void 0===f||f,p=(0,r.Z)(t.elements.popper),d=[].concat(t.scrollParents.reference,t.scrollParents.popper);return s&&d.forEach((function(e){e.addEventListener("scroll",n.update,o)})),c&&p.addEventListener("resize",n.update,o),function(){s&&d.forEach((function(e){e.removeEventListener("scroll",n.update,o)})),c&&p.removeEventListener("resize",n.update,o)}},data:{}}},9564:(e,t,n)=>{n.d(t,{Z:()=>d});var r={left:"right",right:"left",bottom:"top",top:"bottom"};function o(e){return e.replace(/left|right|bottom|top/g,(function(e){return r[e]}))}var i=n(9013),a={start:"end",end:"start"};function s(e){return e.replace(/start|end/g,(function(e){return a[e]}))}var f=n(16),c=n(9376),p=n(5097);const d={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var a=n.mainAxis,d=void 0===a||a,u=n.altAxis,l=void 0===u||u,m=n.fallbackPlacements,v=n.padding,h=n.boundary,Z=n.rootBoundary,g=n.altBoundary,y=n.flipVariations,b=void 0===y||y,w=n.allowedAutoPlacements,x=t.options.placement,O=(0,i.Z)(x),k=m||(O!==x&&b?function(e){if((0,i.Z)(e)===p.d7)return[];var t=o(e);return[s(e),t,s(t)]}(x):[o(x)]),j=[x].concat(k).reduce((function(e,n){return e.concat((0,i.Z)(n)===p.d7?function(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=n.boundary,a=n.rootBoundary,s=n.padding,d=n.flipVariations,u=n.allowedAutoPlacements,l=void 0===u?p.Ct:u,m=(0,c.Z)(r),v=m?d?p.bw:p.bw.filter((function(e){return(0,c.Z)(e)===m})):p.mv,h=v.filter((function(e){return l.indexOf(e)>=0}));0===h.length&&(h=v);var Z=h.reduce((function(t,n){return t[n]=(0,f.Z)(e,{placement:n,boundary:o,rootBoundary:a,padding:s})[(0,i.Z)(n)],t}),{});return Object.keys(Z).sort((function(e,t){return Z[e]-Z[t]}))}(t,{placement:n,boundary:h,rootBoundary:Z,padding:v,flipVariations:b,allowedAutoPlacements:w}):n)}),[]),P=t.rects.reference,E=t.rects.popper,D=new Map,M=!0,R=j[0],L=0;L<j.length;L++){var B=j[L],F=(0,i.Z)(B),W=(0,c.Z)(B)===p.BL,V=[p.we,p.I].indexOf(F)>=0,I=V?"width":"height",A=(0,f.Z)(t,{placement:B,boundary:h,rootBoundary:Z,altBoundary:g,padding:v}),C=V?W?p.F2:p.t$:W?p.I:p.we;P[I]>E[I]&&(C=o(C));var H=o(C),S=[];if(d&&S.push(A[F]<=0),l&&S.push(A[C]<=0,A[H]<=0),S.every((function(e){return e}))){R=B,M=!1;break}D.set(B,S)}if(M)for(var N=function(e){var t=j.find((function(t){var n=D.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return R=t,"break"},T=b?3:1;T>0&&"break"!==N(T);T--);t.placement!==R&&(t.modifiersData[r]._skip=!0,t.placement=R,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}}},5443:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(5097),o=n(16);function i(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function a(e){return[r.we,r.F2,r.I,r.t$].some((function(t){return e[t]>=0}))}const s={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,s=t.rects.popper,f=t.modifiersData.preventOverflow,c=(0,o.Z)(t,{elementContext:"reference"}),p=(0,o.Z)(t,{altBoundary:!0}),d=i(c,r),u=i(p,s,f),l=a(d),m=a(u);t.modifiersData[n]={referenceClippingOffsets:d,popperEscapeOffsets:u,isReferenceHidden:l,hasPopperEscaped:m},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":m})}}},7968:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(9013),o=n(5097);const i={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,i=e.name,a=n.offset,s=void 0===a?[0,0]:a,f=o.Ct.reduce((function(e,n){return e[n]=function(e,t,n){var i=(0,r.Z)(e),a=[o.t$,o.we].indexOf(i)>=0?-1:1,s="function"==typeof n?n(Object.assign({},t,{placement:e})):n,f=s[0],c=s[1];return f=f||0,c=(c||0)*a,[o.t$,o.F2].indexOf(i)>=0?{x:c,y:f}:{x:f,y:c}}(n,t.rects,s),e}),{}),c=f[t.placement],p=c.x,d=c.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=p,t.modifiersData.popperOffsets.y+=d),t.modifiersData[i]=f}}},5815:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(1572);const o={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=(0,r.Z)({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}}},7464:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(5097),o=n(9013),i=n(2443),a=n(125),s=n(2964),f=n(4815),c=n(16),p=n(9376),d=n(5860),u=n(440);const l={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,l=e.name,m=n.mainAxis,v=void 0===m||m,h=n.altAxis,Z=void 0!==h&&h,g=n.boundary,y=n.rootBoundary,b=n.altBoundary,w=n.padding,x=n.tether,O=void 0===x||x,k=n.tetherOffset,j=void 0===k?0:k,P=(0,c.Z)(t,{boundary:g,rootBoundary:y,padding:w,altBoundary:b}),E=(0,o.Z)(t.placement),D=(0,p.Z)(t.placement),M=!D,R=(0,i.Z)(E),L="x"===R?"y":"x",B=t.modifiersData.popperOffsets,F=t.rects.reference,W=t.rects.popper,V="function"==typeof j?j(Object.assign({},t.rects,{placement:t.placement})):j,I={x:0,y:0};if(B){if(v||Z){var A="y"===R?r.we:r.t$,C="y"===R?r.I:r.F2,H="y"===R?"height":"width",S=B[R],N=B[R]+P[A],T=B[R]-P[C],$=O?-W[H]/2:0,q=D===r.BL?F[H]:W[H],z=D===r.BL?-W[H]:-F[H],K=t.elements.arrow,X=O&&K?(0,s.Z)(K):{width:0,height:0},Y=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:(0,d.Z)(),U=Y[A],_=Y[C],G=(0,a.Z)(0,F[H],X[H]),J=M?F[H]/2-$-G-U-V:q-G-U-V,Q=M?-F[H]/2+$+G+_+V:z+G+_+V,ee=t.elements.arrow&&(0,f.Z)(t.elements.arrow),te=ee?"y"===R?ee.clientTop||0:ee.clientLeft||0:0,ne=t.modifiersData.offset?t.modifiersData.offset[t.placement][R]:0,re=B[R]+J-ne-te,oe=B[R]+Q-ne;if(v){var ie=(0,a.Z)(O?(0,u.VV)(N,re):N,S,O?(0,u.Fp)(T,oe):T);B[R]=ie,I[R]=ie-S}if(Z){var ae="x"===R?r.we:r.t$,se="x"===R?r.I:r.F2,fe=B[L],ce=fe+P[ae],pe=fe-P[se],de=(0,a.Z)(O?(0,u.VV)(ce,re):ce,fe,O?(0,u.Fp)(pe,oe):pe);B[L]=de,I[L]=de-fe}}t.modifiersData[l]=I}},requiresIfExists:["offset"]}},557:(e,t,n)=>{n.d(t,{fi:()=>m});var r=n(8706),o=n(6041),i=n(5815),a=n(2363),s=n(7347),f=n(7968),c=n(9564),p=n(7464),d=n(2774),u=n(5443),l=[o.Z,i.Z,a.Z,s.Z,f.Z,c.Z,p.Z,d.Z,u.Z],m=(0,r.kZ)({defaultModifiers:l})},1572:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(9013),o=n(9376),i=n(2443),a=n(5097);function s(e){var t,n=e.reference,s=e.element,f=e.placement,c=f?(0,r.Z)(f):null,p=f?(0,o.Z)(f):null,d=n.x+n.width/2-s.width/2,u=n.y+n.height/2-s.height/2;switch(c){case a.we:t={x:d,y:n.y-s.height};break;case a.I:t={x:d,y:n.y+n.height};break;case a.F2:t={x:n.x+n.width,y:u};break;case a.t$:t={x:n.x-s.width,y:u};break;default:t={x:n.x,y:n.y}}var l=c?(0,i.Z)(c):null;if(null!=l){var m="y"===l?"height":"width";switch(p){case a.BL:t[l]=t[l]-(n[m]/2-s[m]/2);break;case a.ut:t[l]=t[l]+(n[m]/2-s[m]/2)}}return t}},16:(e,t,n)=>{n.d(t,{Z:()=>x});var r=n(5097),o=n(825),i=n(8653),a=n(7078),s=n(1967),f=n(190),c=n(440),p=n(7771),d=n(4815),u=n(4958),l=n(7517),m=n(7505),v=n(4586),h=n(216);function Z(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function g(e,t){return t===r.Pj?Z(function(e){var t=(0,o.Z)(e),n=(0,i.Z)(e),r=t.visualViewport,s=n.clientWidth,f=n.clientHeight,c=0,p=0;return r&&(s=r.width,f=r.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(c=r.offsetLeft,p=r.offsetTop)),{width:s,height:f,x:c+(0,a.Z)(e),y:p}}(e)):(0,u.Re)(t)?function(e){var t=(0,l.Z)(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):Z(function(e){var t,n=(0,i.Z)(e),r=(0,f.Z)(e),o=null==(t=e.ownerDocument)?void 0:t.body,p=(0,c.Fp)(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),d=(0,c.Fp)(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),u=-r.scrollLeft+(0,a.Z)(e),l=-r.scrollTop;return"rtl"===(0,s.Z)(o||n).direction&&(u+=(0,c.Fp)(n.clientWidth,o?o.clientWidth:0)-p),{width:p,height:d,x:u,y:l}}((0,i.Z)(e)))}var y=n(1572),b=n(9718),w=n(2090);function x(e,t){void 0===t&&(t={});var n=t,o=n.placement,a=void 0===o?e.placement:o,f=n.boundary,x=void 0===f?r.zV:f,O=n.rootBoundary,k=void 0===O?r.Pj:O,j=n.elementContext,P=void 0===j?r.k5:j,E=n.altBoundary,D=void 0!==E&&E,M=n.padding,R=void 0===M?0:M,L=(0,b.Z)("number"!=typeof R?R:(0,w.Z)(R,r.mv)),B=P===r.k5?r.YP:r.k5,F=e.rects.popper,W=e.elements[D?B:P],V=function(e,t,n){var r="clippingParents"===t?function(e){var t=(0,p.Z)((0,m.Z)(e)),n=["absolute","fixed"].indexOf((0,s.Z)(e).position)>=0&&(0,u.Re)(e)?(0,d.Z)(e):e;return(0,u.kK)(n)?t.filter((function(e){return(0,u.kK)(e)&&(0,v.Z)(e,n)&&"body"!==(0,h.Z)(e)})):[]}(e):[].concat(t),o=[].concat(r,[n]),i=o[0],a=o.reduce((function(t,n){var r=g(e,n);return t.top=(0,c.Fp)(r.top,t.top),t.right=(0,c.VV)(r.right,t.right),t.bottom=(0,c.VV)(r.bottom,t.bottom),t.left=(0,c.Fp)(r.left,t.left),t}),g(e,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}((0,u.kK)(W)?W:W.contextElement||(0,i.Z)(e.elements.popper),x,k),I=(0,l.Z)(e.elements.reference),A=(0,y.Z)({reference:I,element:F,strategy:"absolute",placement:a}),C=Z(Object.assign({},F,A)),H=P===r.k5?C:I,S={top:V.top-H.top+L.top,bottom:H.bottom-V.bottom+L.bottom,left:V.left-H.left+L.left,right:H.right-V.right+L.right},N=e.modifiersData.offset;if(P===r.k5&&N){var T=N[a];Object.keys(S).forEach((function(e){var t=[r.F2,r.I].indexOf(e)>=0?1:-1,n=[r.we,r.I].indexOf(e)>=0?"y":"x";S[e]+=T[n]*t}))}return S}},2090:(e,t,n)=>{function r(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}n.d(t,{Z:()=>r})},9013:(e,t,n)=>{function r(e){return e.split("-")[0]}n.d(t,{Z:()=>r})},5860:(e,t,n)=>{function r(){return{top:0,right:0,bottom:0,left:0}}n.d(t,{Z:()=>r})},2443:(e,t,n)=>{function r(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}n.d(t,{Z:()=>r})},9376:(e,t,n)=>{function r(e){return e.split("-")[1]}n.d(t,{Z:()=>r})},440:(e,t,n)=>{n.d(t,{Fp:()=>r,VV:()=>o,NM:()=>i});var r=Math.max,o=Math.min,i=Math.round},9718:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(5860);function o(e){return Object.assign({},(0,r.Z)(),e)}},125:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(440);function o(e,t,n){return(0,r.Fp)(e,(0,r.VV)(t,n))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,